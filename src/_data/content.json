[
  {
    "id":"what-is-OOP",
    "name":"Intro",
    "topic":"Qué es la Programación Orientada a Objetos?",
    "contents":[
      {
        "type":"p",
        "text":"La Programación Orientada a Objetos (POO, en español; OOP, según sus siglas en inglés) es un paradigma de programación que viene a innovar la forma de obtener resultados. Los objetos manipulan los datos de entrada para la obtención de datos de salida específicos, donde cada objeto ofrece una funcionalidad especial."
      },
      {
        "type":"p",
        "text": "Los objetos son entidades que tienen un determinado \"estado\", \"comportamiento (método)\" e \"identidad\", este último es el identificador del objeto, los métodos (comportamiento) y atributos (estado) están estrechamente relacionados por la propiedad de conjunto. Esta propiedad destaca que una clase requiere de métodos para poder tratar los atributos con los que cuenta."
      }
    ]
  },
  {
    "id":"OOP-history",
    "name":"Intro",
    "topic":"Historia",
    "contents":[
      {
        "type":"p",
        "text":"Los conceptos de la POO tienen origen en Simula 67, un lenguaje diseñado para hacer simulaciones, creado por Ole-Johan Dahl y Kristen Nygaard, del Centro de Cómputo Noruego en Oslo. En este centro se trabajaba en simulaciones de naves, que fueron confundidas por la explosión combinatoria de cómo las diversas cualidades de diferentes naves podían afectar unas a las otras. La idea surgió al agrupar los diversos tipos de naves en diversas clases de objetos, siendo responsable cada clase de objetos de definir sus \"propios\" datos y comportamientos. Fueron refinados más tarde en Smalltalk para convertirse en un sistema completamente dinámico en el cual los objetos se podrían crear y modificar en tiempo de ejecución en lugar de tener un sistema basado en programas estáticos."
      },
      {
        "type":"p",
        "text":"La POO se fue convirtiendo en el estilo de programación dominante a mediados de los años 1980, en gran parte debido a la influencia de C++. Su dominación fue consolidada gracias al auge de las interfaces gráficas de usuario, para las cuales la POO está particularmente bien adaptada."
      }, 
      {
        "type":"p",
        "text":"Las características de orientación a objetos fueron agregadas a muchos lenguajes existentes durante ese tiempo, incluyendo Ada, BASIC, Lisp más Pascal, entre otros. La adición de estas características a los lenguajes que no fueron diseñados inicialmente para ellas condujo a menudo a problemas de compatibilidad y en la capacidad de mantenimiento del código. Los lenguajes orientados a objetos \"puros\", por su parte, carecían de las características de las cuales muchos programadores habían venido a depender. Para saltar este obstáculo, se hicieron muchas tentativas para crear nuevos lenguajes basados en métodos orientados a objetos, pero permitiendo algunas características imperativas de maneras \"seguras\". El lenguaje de programación Eiffel de Bertrand Meyer fue un temprano y moderadamente acertado lenguaje con esos objetivos, pero ahora ha sido esencialmente reemplazado por Java, en gran parte debido a la aparición de Internet y a la implementación de la máquina virtual Java en la mayoría de navegadores web. PHP es otro que en su versión 5 se ha modificado, cumpliendo todas las características propias de la orientación a objetos."
      }
    ]
  },
  {
    "id":"encapsulation",
    "name":"Principios",
    "topic":"Encapsulación",
    "contents":[
      {
        "type":"p",
        "text":"Se refiere al ocultamiento del estado, es decir, de los datos miembro de un objeto de manera que solo se pueda cambiar mediante las operaciones definidas para ese objeto."
      },
      {
        "type":"p",
        "text":"De esta forma el usuario de la clase puede obviar la implementación de los métodos y propiedades para concentrarse solo en cómo usarlos. Por otro lado se evita que el usuario pueda cambiar su estado de maneras imprevistas e incontroladas."
      },
      {
        "type":"h4",
        "text":"Niveles de Encapsulamiento"
      },
      {
        "type":"ul",
        "text": [
          "<strong>Abierto</strong>: Hace que el miembro de la clase pueda ser accedido desde el exterior de la Clase y cualquier parte del programa.",
          "<strong>Protegido</strong>: Solo es accesible desde la Clase y las clases que heredan (a cualquier nivel).",
          "<strong>Semi cerrado:</strong> Solo es accesible desde la clase heredada.",
          "<strong>Cerrado</strong>: Solo es accesible desde la Clase."
        ]
      }
    ]
  },
  {
    "id":"abstraction",
    "name":"Principios",
    "topic":"Abstracción",
    "contents":[
      {
        "type":"p",
        "text":"Denota las características esenciales de un objeto, donde se capturan sus comportamientos. Cada objeto en el sistema sirve como modelo de un \"agente\" abstracto que puede realizar trabajo, informar y cambiar su estado, y \"comunicarse\" con otros objetos en el sistema sin revelar \"cómo\" se implementan estas características."
      },
      {
        "type":"p",
        "text":"El proceso de abstracción permite seleccionar las características relevantes dentro de un conjunto e identificar comportamientos comunes para definir nuevos tipos de entidades en el mundo real."
      },
      {
        "type":"p",
        "text":"La abstracción es clave en el proceso de análisis y diseño orientado a objetos, ya que mediante ella podemos llegar a armar un conjunto de clases que permitan modelar la realidad o el problema que se quiere atacar."
      }
    ]
  },
  {
    "id":"inheritance",
    "name":"Principios",
    "topic":"Herencia",
    "contents":[
      {
        "type":"p",
        "text":"Las clases no se encuentran aisladas, sino que se relacionan entre sí, formando una jerarquía de clasificación. Los objetos heredan las propiedades y el comportamiento de todas las clases a las que pertenecen. La herencia organiza y facilita el polimorfismo y el encapsulamiento, permitiendo a los objetos ser definidos y creados como tipos especializados de objetos preexistentes. Estos pueden compartir (y extender) su comportamiento sin tener que volver a implementarlo."
      },
      {
        "type":"p",
        "text":"La herencia facilita la creación de objetos a partir de otros ya existentes e implica que una subclase obtiene todo el comportamiento (métodos) y eventualmente los atributos (variables) de su superclase."
      }
    ]
  },
  {
    "id":"polymorph",
    "name":"Principios",
    "topic":"Polimorfismo",
    "contents":[
      {
        "type":"p",
        "text":"Comportamientos diferentes, asociados a objetos distintos, pueden compartir el mismo nombre; al llamarlos por ese nombre se utilizará el comportamiento correspondiente al objeto que se esté usando. O, dicho de otro modo, las referencias y las colecciones de objetos pueden contener objetos de diferentes tipos, y la invocación de un comportamiento en una referencia producirá el comportamiento correcto para el tipo real del objeto referenciado."
      }
    ]
  },
  {
    "id":"class-based",
    "name":"Tipos de OOP",
    "topic":"Basada en Clases",
    "contents":[
      {
        "type":"p",
        "text":"Es la más ampliamente usada por los lenguajes de programación orientada a objetos. Por ejemplo es usada por Java, C++ y C#. Se basa en crear una estructura molde llamada clase donde se especifican los campos y métodos que tendrán nuestros objetos. Cada vez que necesitamos un objeto creamos una instancia (o copia del objeto) usando la clase como molde."
      }
    ]
  },
  {
    "id":"object-based",
    "name":"Tipos de OOP",
    "topic":"Basada en Objetos",
    "contents":[
      {
        "type":"p",
        "text":"Es soportado en Javascript, Python y Ruby. No hay clases, solo hay objetos. El mecanismo para la reutilización está dado por la clonación de objetos. Se crean directamente los objetos y cuando se quiere generar otro con la misma estructura se usa clonación. Una vez clonado si queremos podemos agregar los campos y métodos necesarios. Un objeto prototípico es un objeto que se utiliza como una plantilla a partir de la cual se obtiene el conjunto inicial de propiedades de un objeto. Cualquier objeto puede ser utilizado como el prototipo de otro objeto, permitiendo al segundo objeto compartir las propiedades del primero."
      }
    ]
  }
]




